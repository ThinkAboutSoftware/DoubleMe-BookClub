줄거리 요약
SOLID 원칙
변경이 쉬움, 이해가 쉬움, 컴포넌트의 기반

7장 단일 책임 원칙
SRP single responsibility principle

모듈은 하나의 액터에 대해서만 책임지는 것
응집성이 높아야 함
데이터와 메서드를 분리하기
여러 클래스로 분할되어 추적이 어려운 경우 파사드 패턴을 적용
단일 책임 원칙은 클래스와 메서드의 원칙이나 상위로 올라가면 공통 폐쇄의 원칙이 됨

8장 개방 폐쇄 원칙
Open closed principle

객체는 확장에는 열리고 변경에 닫혀있어야 한다

소프트웨어를 배우는 주요 이유
예시를 들 때 책임을 나누고 그 처리과정을 클래스로 나누고 클래스 묶음을 컴포넌트로 나누었다
아키텍트에서 기능을 나누기 > 컴포넌트의 계층구조로 나누기 > 조직화를 하며 보호의 계층 수준을 나누기
인터페이스는 추이종속성을 막는 중요한 기능을 담당
확장은 쉽고 변경에서 시스템을 보호하는 것

9장 리스코프 치환 원리
Liscov Substitution Principle

하나의 객체를 다른 객체로 치환했을 때 그를 활용한 객체의 행동이 변화가 없으면 치환된 객체는 치환한 객체의 하위객체가 된다
상속을 지원하는 형태

10장 인터페이스 분리 원칙
Interface Seperation Principle

동적 언어의 경우는 소스코드 의존성이 없다고하니 언어, 프레임워크의 문제라고 진단한다

11장 의존성 역전 원칙
Dependency Inversion Principle

유연성이 극대화된 코드는 모든 의존성이 추상적인 것에 의존하는 것

모든 의존성을 피하는 것이 아니라 변동성이 큰 구체적인 모듈 의존성을 줄이는 것
추상적인 인터페이스에 의존하기
추상팩토리 기법
의존성 역전원리 : 제어 흐름이 의존성과 역전되는 현상
